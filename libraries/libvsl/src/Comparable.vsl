public interface Comparable: Comparable, Equatable {

    @backend(llvm)
    public static func >=(lhs: Self, rhs: Self) -> Bool native {
        %2 = call i1 "<methodRoot>.=="(<param> %0, <param> %1)
        br i1 %2, label %isTrue, %tryGt
    isTrue:
        ret i1 1
    isFalse:
        ret i1 0
    tryGt:
        %3 = call i1 "<methodRoot>.>"(<param> %0, <param> %1)
        br i1 %3, label %isTrue, %isFalse
    }
    
    @backend(llvm)
    public static func <=(lhs: Self, rhs: Self) -> Bool native {
        %2 = call i1 "<methodRoot>.=="(<param> %0, <param> %1)
        br i1 %2, label %isTrue, %tryGt
    isTrue:
        ret i1 1
    isFalse:
        ret i1 0
    tryGt:
        %3 = call i1 "<methodRoot>.>"(<param> %0, <param> %1)
        br i1 %3, label %isTrue, %isFalse
    }
}